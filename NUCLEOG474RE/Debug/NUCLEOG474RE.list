
NUCLEOG474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002780  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002958  08002958  00003958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800298c  0800298c  00004020  2**0
                  CONTENTS
  4 .ARM          00000008  0800298c  0800298c  0000398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002994  08002994  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002994  08002994  00003994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002998  08002998  00003998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800299c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000020  080029bc  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080029bc  000040ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeff  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e0  00000000  00000000  0000ef4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  00010830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f9  00000000  00000000  00011150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cf9  00000000  00000000  00011849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5e7  00000000  00000000  00036542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9649  00000000  00000000  00041b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002478  00000000  00000000  0012b1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0012d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002940 	.word	0x08002940

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08002940 	.word	0x08002940

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 faff 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f837 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f881 	bl	8000620 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 f980 	bl	8000824 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000524:	2101      	movs	r1, #1
 8000526:	2000      	movs	r0, #0
 8000528:	f000 f9b2 	bl	8000890 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800052c:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <main+0x78>)
 800052e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000532:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000534:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <main+0x78>)
 8000536:	2200      	movs	r2, #0
 8000538:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <main+0x78>)
 800053c:	2200      	movs	r2, #0
 800053e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <main+0x78>)
 8000542:	2200      	movs	r2, #0
 8000544:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <main+0x78>)
 8000548:	2200      	movs	r2, #0
 800054a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800054c:	490c      	ldr	r1, [pc, #48]	@ (8000580 <main+0x78>)
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fa2a 	bl	80009a8 <BSP_COM_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <main+0x56>
  {
    Error_Handler();
 800055a:	f000 f8c7 	bl	80006ec <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  Value = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800055e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000562:	4808      	ldr	r0, [pc, #32]	@ (8000584 <main+0x7c>)
 8000564:	f000 fe38 	bl	80011d8 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, Value);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	461a      	mov	r2, r3
 8000570:	2120      	movs	r1, #32
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f000 fe47 	bl	8001208 <HAL_GPIO_WritePin>
	  Value = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800057a:	bf00      	nop
 800057c:	e7ef      	b.n	800055e <main+0x56>
 800057e:	bf00      	nop
 8000580:	2000003c 	.word	0x2000003c
 8000584:	48000800 	.word	0x48000800

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	@ 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	2238      	movs	r2, #56	@ 0x38
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f9a5 	bl	80028e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fe44 	bl	8001238 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2340      	movs	r3, #64	@ 0x40
 80005bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ca:	2355      	movs	r3, #85	@ 0x55
 80005cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fede 	bl	80013a0 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ea:	f000 f87f 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2104      	movs	r1, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f9dc 	bl	80019c4 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000612:	f000 f86b 	bl	80006ec <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	@ 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	4a2a      	ldr	r2, [pc, #168]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000642:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	4a24      	ldr	r2, [pc, #144]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a1e      	ldr	r2, [pc, #120]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a18      	ldr	r2, [pc, #96]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f000 fdb3 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <MX_GPIO_Init+0xc8>)
 80006b8:	f000 fc0c 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006bc:	2320      	movs	r3, #32
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d6:	f000 fbfd 	bl	8000ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	@ 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000800 	.word	0x48000800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000702:	4a0e      	ldr	r2, [pc, #56]	@ (800073c <HAL_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6613      	str	r3, [r2, #96]	@ 0x60
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <HAL_MspInit+0x44>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000720:	6593      	str	r3, [r2, #88]	@ 0x58
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800072e:	f000 fe27 	bl	8001380 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <NMI_Handler+0x4>

08000748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <MemManage_Handler+0x4>

08000758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <UsageFault_Handler+0x4>

08000768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000796:	f000 fa0f 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f8e2 	bl	800096c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d0:	480d      	ldr	r0, [pc, #52]	@ (8000808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d4:	f7ff ffea 	bl	80007ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007da:	490d      	ldr	r1, [pc, #52]	@ (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f0:	4c0a      	ldr	r4, [pc, #40]	@ (800081c <LoopForever+0x16>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fe:	f002 f87b 	bl	80028f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000802:	f7ff fe81 	bl	8000508 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   r0, =_estack
 8000808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000814:	0800299c 	.word	0x0800299c
  ldr r2, =_sbss
 8000818:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800081c:	200000ec 	.word	0x200000ec

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>
	...

08000824 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <BSP_LED_Init+0x64>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a15      	ldr	r2, [pc, #84]	@ (8000888 <BSP_LED_Init+0x64>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <BSP_LED_Init+0x64>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000846:	2320      	movs	r3, #32
 8000848:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4a0c      	ldr	r2, [pc, #48]	@ (800088c <BSP_LED_Init+0x68>)
 800085a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085e:	f107 020c 	add.w	r2, r7, #12
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fb35 	bl	8000ed4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <BSP_LED_Init+0x68>)
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	2120      	movs	r1, #32
 8000874:	2200      	movs	r2, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fcc6 	bl	8001208 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000
 800088c:	20000004 	.word	0x20000004

08000890 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80008a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <BSP_PB_Init+0xc4>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000954 <BSP_PB_Init+0xc4>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ac:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <BSP_PB_Init+0xc4>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80008b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008bc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10c      	bne.n	80008e6 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <BSP_PB_Init+0xc8>)
 80008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d8:	f107 020c 	add.w	r2, r7, #12
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 faf8 	bl	8000ed4 <HAL_GPIO_Init>
 80008e4:	e031      	b.n	800094a <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80008e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ea:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000958 <BSP_PB_Init+0xc8>)
 80008f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f4:	f107 020c 	add.w	r2, r7, #12
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 faea 	bl	8000ed4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	4a15      	ldr	r2, [pc, #84]	@ (800095c <BSP_PB_Init+0xcc>)
 8000906:	441a      	add	r2, r3
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4915      	ldr	r1, [pc, #84]	@ (8000960 <BSP_PB_Init+0xd0>)
 800090c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000910:	4619      	mov	r1, r3
 8000912:	4610      	mov	r0, r2
 8000914:	f000 fa9a 	bl	8000e4c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	4a0f      	ldr	r2, [pc, #60]	@ (800095c <BSP_PB_Init+0xcc>)
 800091e:	1898      	adds	r0, r3, r2
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <BSP_PB_Init+0xd4>)
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	461a      	mov	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f000 fa71 	bl	8000e12 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000930:	2028      	movs	r0, #40	@ 0x28
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4a0c      	ldr	r2, [pc, #48]	@ (8000968 <BSP_PB_Init+0xd8>)
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	2200      	movs	r2, #0
 800093c:	4619      	mov	r1, r3
 800093e:	f000 fa34 	bl	8000daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000942:	2328      	movs	r3, #40	@ 0x28
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fa4a 	bl	8000dde <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	20000008 	.word	0x20000008
 800095c:	2000004c 	.word	0x2000004c
 8000960:	08002970 	.word	0x08002970
 8000964:	20000010 	.word	0x20000010
 8000968:	20000014 	.word	0x20000014

0800096c <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <BSP_PB_IRQHandler+0x20>)
 800097c:	4413      	add	r3, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fa78 	bl	8000e74 <HAL_EXTI_IRQHandler>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000004c 	.word	0x2000004c

08000990 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d903      	bls.n	80009c6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80009be:	f06f 0301 	mvn.w	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	e018      	b.n	80009f8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2294      	movs	r2, #148	@ 0x94
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000a04 <BSP_COM_Init+0x5c>)
 80009d0:	4413      	add	r3, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f852 	bl	8000a7c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2294      	movs	r2, #148	@ 0x94
 80009dc:	fb02 f303 	mul.w	r3, r2, r3
 80009e0:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <BSP_COM_Init+0x5c>)
 80009e2:	4413      	add	r3, r2
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f80e 	bl	8000a08 <MX_LPUART1_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80009f2:	f06f 0303 	mvn.w	r3, #3
 80009f6:	e000      	b.n	80009fa <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80009f8:	68fb      	ldr	r3, [r7, #12]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000054 	.word	0x20000054

08000a08 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_LPUART1_Init+0x60>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	220c      	movs	r2, #12
 8000a26:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	895b      	ldrh	r3, [r3, #10]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	891b      	ldrh	r3, [r3, #8]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	899b      	ldrh	r3, [r3, #12]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a54:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f001 f9d0 	bl	8001dfc <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000000c 	.word	0x2000000c

08000a6c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff ff8d 	bl	8000990 <BSP_PB_Callback>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <COM1_MspInit+0x94>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a88:	4a21      	ldr	r2, [pc, #132]	@ (8000b10 <COM1_MspInit+0x94>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a90:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <COM1_MspInit+0x94>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <COM1_MspInit+0x94>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b10 <COM1_MspInit+0x94>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <COM1_MspInit+0x94>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <COM1_MspInit+0x94>)
 8000ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ab8:	4a15      	ldr	r2, [pc, #84]	@ (8000b10 <COM1_MspInit+0x94>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <COM1_MspInit+0x94>)
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000acc:	2304      	movs	r3, #4
 8000ace:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000adc:	230c      	movs	r3, #12
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aea:	f000 f9f3 	bl	8000ed4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000aee:	2308      	movs	r3, #8
 8000af0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000af6:	230c      	movs	r3, #12
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b04:	f000 f9e6 	bl	8000ed4 <HAL_GPIO_Init>
}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	@ 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 f938 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f80d 	bl	8000b44 <HAL_InitTick>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	e001      	b.n	8000b3a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b36:	f7ff fddf 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3a:	79fb      	ldrb	r3, [r7, #7]

}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <HAL_InitTick+0x68>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d022      	beq.n	8000b9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b58:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_InitTick+0x6c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <HAL_InitTick+0x68>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f944 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10f      	bne.n	8000b98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d809      	bhi.n	8000b92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	f000 f910 	bl	8000daa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <HAL_InitTick+0x70>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e007      	b.n	8000ba2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e004      	b.n	8000ba2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e001      	b.n	8000ba2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000001c 	.word	0x2000001c
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000018 	.word	0x20000018

08000bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_IncTick+0x1c>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_IncTick+0x20>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a03      	ldr	r2, [pc, #12]	@ (8000bd4 <HAL_IncTick+0x1c>)
 8000bc8:	6013      	str	r3, [r2, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	200000e8 	.word	0x200000e8
 8000bd8:	2000001c 	.word	0x2000001c

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200000e8 	.word	0x200000e8

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	@ (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	@ (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff29 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff40 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff90 	bl	8000ce8 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5f 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff33 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa4 	bl	8000d50 <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8000e12:	b480      	push	{r7}
 8000e14:	b087      	sub	sp, #28
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8000e24:	7afb      	ldrb	r3, [r7, #11]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	605a      	str	r2, [r3, #4]
      break;
 8000e30:	e005      	b.n	8000e3e <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8000e3c:	bf00      	nop
  }

  return status;
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e003      	b.n	8000e68 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000e66:	2300      	movs	r3, #0
  }
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0c1b      	lsrs	r3, r3, #16
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	2201      	movs	r2, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	015a      	lsls	r2, r3, #5
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_EXTI_IRQHandler+0x5c>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d009      	beq.n	8000ec6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4798      	blx	r3
    }
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40010414 	.word	0x40010414

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ee2:	e15a      	b.n	800119a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 814c 	beq.w	8001194 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 0201 	and.w	r2, r3, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	6939      	ldr	r1, [r7, #16]
 8001002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0203 	and.w	r2, r3, #3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 80a6 	beq.w	8001194 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001048:	4b5b      	ldr	r3, [pc, #364]	@ (80011b8 <HAL_GPIO_Init+0x2e4>)
 800104a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104c:	4a5a      	ldr	r2, [pc, #360]	@ (80011b8 <HAL_GPIO_Init+0x2e4>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6613      	str	r3, [r2, #96]	@ 0x60
 8001054:	4b58      	ldr	r3, [pc, #352]	@ (80011b8 <HAL_GPIO_Init+0x2e4>)
 8001056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001060:	4a56      	ldr	r2, [pc, #344]	@ (80011bc <HAL_GPIO_Init+0x2e8>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800108a:	d01f      	beq.n	80010cc <HAL_GPIO_Init+0x1f8>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4c      	ldr	r2, [pc, #304]	@ (80011c0 <HAL_GPIO_Init+0x2ec>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d019      	beq.n	80010c8 <HAL_GPIO_Init+0x1f4>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4b      	ldr	r2, [pc, #300]	@ (80011c4 <HAL_GPIO_Init+0x2f0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d013      	beq.n	80010c4 <HAL_GPIO_Init+0x1f0>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a4a      	ldr	r2, [pc, #296]	@ (80011c8 <HAL_GPIO_Init+0x2f4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d00d      	beq.n	80010c0 <HAL_GPIO_Init+0x1ec>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a49      	ldr	r2, [pc, #292]	@ (80011cc <HAL_GPIO_Init+0x2f8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0x1e8>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a48      	ldr	r2, [pc, #288]	@ (80011d0 <HAL_GPIO_Init+0x2fc>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d101      	bne.n	80010b8 <HAL_GPIO_Init+0x1e4>
 80010b4:	2305      	movs	r3, #5
 80010b6:	e00a      	b.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010b8:	2306      	movs	r3, #6
 80010ba:	e008      	b.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010bc:	2304      	movs	r3, #4
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010c0:	2303      	movs	r3, #3
 80010c2:	e004      	b.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010cc:	2300      	movs	r3, #0
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	f002 0203 	and.w	r2, r2, #3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4093      	lsls	r3, r2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010de:	4937      	ldr	r1, [pc, #220]	@ (80011bc <HAL_GPIO_Init+0x2e8>)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ec:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001110:	4a30      	ldr	r2, [pc, #192]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001116:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800113a:	4a26      	ldr	r2, [pc, #152]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001140:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001164:	4a1b      	ldr	r2, [pc, #108]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800118e:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f47f ae9d 	bne.w	8000ee4 <HAL_GPIO_Init+0x10>
  }
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800
 80011c8:	48000c00 	.word	0x48000c00
 80011cc:	48001000 	.word	0x48001000
 80011d0:	48001400 	.word	0x48001400
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e001      	b.n	80011fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001224:	e002      	b.n	800122c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d141      	bne.n	80012ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001246:	4b4b      	ldr	r3, [pc, #300]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800124e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001252:	d131      	bne.n	80012b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001254:	4b47      	ldr	r3, [pc, #284]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800125a:	4a46      	ldr	r2, [pc, #280]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001264:	4b43      	ldr	r3, [pc, #268]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800126c:	4a41      	ldr	r2, [pc, #260]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001274:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2232      	movs	r2, #50	@ 0x32
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	4a3f      	ldr	r2, [pc, #252]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9b      	lsrs	r3, r3, #18
 8001286:	3301      	adds	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128a:	e002      	b.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3b01      	subs	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001292:	4b38      	ldr	r3, [pc, #224]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800129e:	d102      	bne.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f2      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a6:	4b33      	ldr	r3, [pc, #204]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012b2:	d158      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e057      	b.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012be:	4a2d      	ldr	r2, [pc, #180]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012c8:	e04d      	b.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d0:	d141      	bne.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d2:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012de:	d131      	bne.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012e0:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012e6:	4a23      	ldr	r2, [pc, #140]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2232      	movs	r2, #50	@ 0x32
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	4a1c      	ldr	r2, [pc, #112]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	3301      	adds	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001316:	e002      	b.n	800131e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3b01      	subs	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800132a:	d102      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f2      	bne.n	8001318 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800133a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133e:	d112      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e011      	b.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001354:	e007      	b.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001364:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40007000 	.word	0x40007000
 8001378:	20000000 	.word	0x20000000
 800137c:	431bde83 	.word	0x431bde83

08001380 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800138a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138e:	6093      	str	r3, [r2, #8]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40007000 	.word	0x40007000

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e2fe      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d075      	beq.n	80014aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013be:	4b97      	ldr	r3, [pc, #604]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c8:	4b94      	ldr	r3, [pc, #592]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	d102      	bne.n	80013de <HAL_RCC_OscConfig+0x3e>
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d002      	beq.n	80013e4 <HAL_RCC_OscConfig+0x44>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d10b      	bne.n	80013fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	4b8d      	ldr	r3, [pc, #564]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d05b      	beq.n	80014a8 <HAL_RCC_OscConfig+0x108>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d157      	bne.n	80014a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e2d9      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x74>
 8001406:	4b85      	ldr	r3, [pc, #532]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a84      	ldr	r2, [pc, #528]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e01d      	b.n	8001450 <HAL_RCC_OscConfig+0xb0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x98>
 800141e:	4b7f      	ldr	r3, [pc, #508]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a7e      	ldr	r2, [pc, #504]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b7c      	ldr	r3, [pc, #496]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7b      	ldr	r2, [pc, #492]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0xb0>
 8001438:	4b78      	ldr	r3, [pc, #480]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a77      	ldr	r2, [pc, #476]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 800143e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b75      	ldr	r3, [pc, #468]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a74      	ldr	r2, [pc, #464]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 800144a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800144e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fbc0 	bl	8000bdc <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fbbc 	bl	8000bdc <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	@ 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e29e      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001472:	4b6a      	ldr	r3, [pc, #424]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0xc0>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fbac 	bl	8000bdc <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fba8 	bl	8000bdc <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	@ 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e28a      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149a:	4b60      	ldr	r3, [pc, #384]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0xe8>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d075      	beq.n	80015a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b6:	4b59      	ldr	r3, [pc, #356]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c0:	4b56      	ldr	r3, [pc, #344]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	d102      	bne.n	80014d6 <HAL_RCC_OscConfig+0x136>
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d002      	beq.n	80014dc <HAL_RCC_OscConfig+0x13c>
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d11f      	bne.n	800151c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014dc:	4b4f      	ldr	r3, [pc, #316]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_OscConfig+0x154>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e25d      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b49      	ldr	r3, [pc, #292]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	4946      	ldr	r1, [pc, #280]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001508:	4b45      	ldr	r3, [pc, #276]	@ (8001620 <HAL_RCC_OscConfig+0x280>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fb19 	bl	8000b44 <HAL_InitTick>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d043      	beq.n	80015a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e249      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d023      	beq.n	800156c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a3c      	ldr	r2, [pc, #240]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 800152a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fb54 	bl	8000bdc <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff fb50 	bl	8000bdc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e232      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800154a:	4b34      	ldr	r3, [pc, #208]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b31      	ldr	r3, [pc, #196]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	061b      	lsls	r3, r3, #24
 8001564:	492d      	ldr	r1, [pc, #180]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
 800156a:	e01a      	b.n	80015a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156c:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2a      	ldr	r2, [pc, #168]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001572:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fb30 	bl	8000bdc <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fb2c 	bl	8000bdc <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e20e      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001592:	4b22      	ldr	r3, [pc, #136]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x1e0>
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d041      	beq.n	8001632 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80015b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015bc:	4a17      	ldr	r2, [pc, #92]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fb09 	bl	8000bdc <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fb05 	bl	8000bdc <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1e7      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80015e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0ef      	beq.n	80015ce <HAL_RCC_OscConfig+0x22e>
 80015ee:	e020      	b.n	8001632 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80015f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f6:	4a09      	ldr	r2, [pc, #36]	@ (800161c <HAL_RCC_OscConfig+0x27c>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff faec 	bl	8000bdc <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001606:	e00d      	b.n	8001624 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fae8 	bl	8000bdc <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d906      	bls.n	8001624 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1ca      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001624:	4b8c      	ldr	r3, [pc, #560]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ea      	bne.n	8001608 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80a6 	beq.w	800178c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001644:	4b84      	ldr	r3, [pc, #528]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x2b4>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x2b6>
 8001654:	2300      	movs	r3, #0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00d      	beq.n	8001676 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b7f      	ldr	r3, [pc, #508]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	4a7e      	ldr	r2, [pc, #504]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001664:	6593      	str	r3, [r2, #88]	@ 0x58
 8001666:	4b7c      	ldr	r3, [pc, #496]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001672:	2301      	movs	r3, #1
 8001674:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001676:	4b79      	ldr	r3, [pc, #484]	@ (800185c <HAL_RCC_OscConfig+0x4bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001682:	4b76      	ldr	r3, [pc, #472]	@ (800185c <HAL_RCC_OscConfig+0x4bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a75      	ldr	r2, [pc, #468]	@ (800185c <HAL_RCC_OscConfig+0x4bc>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168e:	f7ff faa5 	bl	8000bdc <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff faa1 	bl	8000bdc <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e183      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	4b6c      	ldr	r3, [pc, #432]	@ (800185c <HAL_RCC_OscConfig+0x4bc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d108      	bne.n	80016ce <HAL_RCC_OscConfig+0x32e>
 80016bc:	4b66      	ldr	r3, [pc, #408]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c2:	4a65      	ldr	r2, [pc, #404]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016cc:	e024      	b.n	8001718 <HAL_RCC_OscConfig+0x378>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b05      	cmp	r3, #5
 80016d4:	d110      	bne.n	80016f8 <HAL_RCC_OscConfig+0x358>
 80016d6:	4b60      	ldr	r3, [pc, #384]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016dc:	4a5e      	ldr	r2, [pc, #376]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f6:	e00f      	b.n	8001718 <HAL_RCC_OscConfig+0x378>
 80016f8:	4b57      	ldr	r3, [pc, #348]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fe:	4a56      	ldr	r2, [pc, #344]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001708:	4b53      	ldr	r3, [pc, #332]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170e:	4a52      	ldr	r2, [pc, #328]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d016      	beq.n	800174e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff fa5c 	bl	8000bdc <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fa58 	bl	8000bdc <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e138      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173e:	4b46      	ldr	r3, [pc, #280]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ed      	beq.n	8001728 <HAL_RCC_OscConfig+0x388>
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fa45 	bl	8000bdc <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fa41 	bl	8000bdc <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e121      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	4b3a      	ldr	r3, [pc, #232]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ed      	bne.n	8001756 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	4a34      	ldr	r2, [pc, #208]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d03c      	beq.n	8001812 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d01c      	beq.n	80017da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80017a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fa14 	bl	8000bdc <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b8:	f7ff fa10 	bl	8000bdc <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0f2      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80017cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ef      	beq.n	80017b8 <HAL_RCC_OscConfig+0x418>
 80017d8:	e01b      	b.n	8001812 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017da:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80017dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff f9f7 	bl	8000bdc <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f2:	f7ff f9f3 	bl	8000bdc <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0d5      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ef      	bne.n	80017f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80c9 	beq.w	80019ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800181c:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b0c      	cmp	r3, #12
 8001826:	f000 8083 	beq.w	8001930 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d15e      	bne.n	80018f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_RCC_OscConfig+0x4b8>)
 8001838:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800183c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff f9cd 	bl	8000bdc <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	e00c      	b.n	8001860 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff f9c9 	bl	8000bdc <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d905      	bls.n	8001860 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0ab      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
 8001858:	40021000 	.word	0x40021000
 800185c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001860:	4b55      	ldr	r3, [pc, #340]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ec      	bne.n	8001846 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186c:	4b52      	ldr	r3, [pc, #328]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	4b52      	ldr	r3, [pc, #328]	@ (80019bc <HAL_RCC_OscConfig+0x61c>)
 8001872:	4013      	ands	r3, r2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6a11      	ldr	r1, [r2, #32]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800187c:	3a01      	subs	r2, #1
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	4311      	orrs	r1, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001886:	0212      	lsls	r2, r2, #8
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800188e:	0852      	lsrs	r2, r2, #1
 8001890:	3a01      	subs	r2, #1
 8001892:	0552      	lsls	r2, r2, #21
 8001894:	4311      	orrs	r1, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800189a:	0852      	lsrs	r2, r2, #1
 800189c:	3a01      	subs	r2, #1
 800189e:	0652      	lsls	r2, r2, #25
 80018a0:	4311      	orrs	r1, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018a6:	06d2      	lsls	r2, r2, #27
 80018a8:	430a      	orrs	r2, r1
 80018aa:	4943      	ldr	r1, [pc, #268]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b0:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a40      	ldr	r2, [pc, #256]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018bc:	4b3e      	ldr	r3, [pc, #248]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4a3d      	ldr	r2, [pc, #244]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff f988 	bl	8000bdc <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f984 	bl	8000bdc <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e066      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x530>
 80018ee:	e05e      	b.n	80019ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a30      	ldr	r2, [pc, #192]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 80018f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f96e 	bl	8000bdc <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f96a 	bl	8000bdc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e04c      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001916:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	4924      	ldr	r1, [pc, #144]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <HAL_RCC_OscConfig+0x620>)
 800192a:	4013      	ands	r3, r2
 800192c:	60cb      	str	r3, [r1, #12]
 800192e:	e03e      	b.n	80019ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e039      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <HAL_RCC_OscConfig+0x618>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0203 	and.w	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	429a      	cmp	r2, r3
 800194e:	d12c      	bne.n	80019aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	3b01      	subs	r3, #1
 800195c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d123      	bne.n	80019aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d11b      	bne.n	80019aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d113      	bne.n	80019aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	3b01      	subs	r3, #1
 8001990:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d109      	bne.n	80019aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a0:	085b      	lsrs	r3, r3, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	019f800c 	.word	0x019f800c
 80019c0:	feeefffc 	.word	0xfeeefffc

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e11e      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b91      	ldr	r3, [pc, #580]	@ (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b8e      	ldr	r3, [pc, #568]	@ (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 020f 	bic.w	r2, r3, #15
 80019f2:	498c      	ldr	r1, [pc, #560]	@ (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b8a      	ldr	r3, [pc, #552]	@ (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e106      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d073      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d129      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a20:	4b81      	ldr	r3, [pc, #516]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0f4      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a30:	f000 f99e 	bl	8001d70 <RCC_GetSysClockFreqFromPLLSource>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4a7c      	ldr	r2, [pc, #496]	@ (8001c2c <HAL_RCC_ClockConfig+0x268>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d93f      	bls.n	8001abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d033      	beq.n	8001abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d12f      	bne.n	8001abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a5e:	4b72      	ldr	r3, [pc, #456]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a66:	4a70      	ldr	r2, [pc, #448]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e024      	b.n	8001abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0c6      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0be      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a9c:	f000 f8ce 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4a61      	ldr	r2, [pc, #388]	@ (8001c2c <HAL_RCC_ClockConfig+0x268>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d909      	bls.n	8001abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001abe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 0203 	bic.w	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4957      	ldr	r1, [pc, #348]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f884 	bl	8000bdc <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f7ff f880 	bl	8000bdc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e095      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b4e      	ldr	r3, [pc, #312]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 020c 	and.w	r2, r3, #12
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1eb      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d023      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b43      	ldr	r3, [pc, #268]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a42      	ldr	r2, [pc, #264]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b30:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b38:	4a3b      	ldr	r2, [pc, #236]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4936      	ldr	r1, [pc, #216]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b80      	cmp	r3, #128	@ 0x80
 8001b58:	d105      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b5a:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	4a32      	ldr	r2, [pc, #200]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b66:	4b2f      	ldr	r3, [pc, #188]	@ (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d21d      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b74:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 020f 	bic.w	r2, r3, #15
 8001b7c:	4929      	ldr	r1, [pc, #164]	@ (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b84:	f7ff f82a 	bl	8000bdc <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff f826 	bl	8000bdc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e03b      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1ed      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4917      	ldr	r1, [pc, #92]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490f      	ldr	r1, [pc, #60]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bee:	f000 f825 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	490c      	ldr	r1, [pc, #48]	@ (8001c30 <HAL_RCC_ClockConfig+0x26c>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_RCC_ClockConfig+0x270>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <HAL_RCC_ClockConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe ff96 	bl	8000b44 <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	04c4b400 	.word	0x04c4b400
 8001c30:	08002958 	.word	0x08002958
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000018 	.word	0x20000018

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c42:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e047      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c54:	4b27      	ldr	r3, [pc, #156]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c60:	4b26      	ldr	r3, [pc, #152]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e03e      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c66:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d136      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3301      	adds	r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d10c      	bne.n	8001caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c90:	4a1a      	ldr	r2, [pc, #104]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	4a16      	ldr	r2, [pc, #88]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9a:	68d2      	ldr	r2, [r2, #12]
 8001c9c:	0a12      	lsrs	r2, r2, #8
 8001c9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
      break;
 8001ca8:	e00c      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001caa:	4a13      	ldr	r2, [pc, #76]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4a10      	ldr	r2, [pc, #64]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	0a12      	lsrs	r2, r2, #8
 8001cb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
      break;
 8001cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0e5b      	lsrs	r3, r3, #25
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e001      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ce4:	693b      	ldr	r3, [r7, #16]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	00f42400 	.word	0x00f42400
 8001cfc:	016e3600 	.word	0x016e3600

08001d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b03      	ldr	r3, [pc, #12]	@ (8001d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d1c:	f7ff fff0 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4904      	ldr	r1, [pc, #16]	@ (8001d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08002968 	.word	0x08002968

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d48:	f7ff ffda 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0adb      	lsrs	r3, r3, #11
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4904      	ldr	r1, [pc, #16]	@ (8001d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08002968 	.word	0x08002968

08001d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d76:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d10c      	bne.n	8001dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d94:	4a17      	ldr	r2, [pc, #92]	@ (8001df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	4a14      	ldr	r2, [pc, #80]	@ (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d9e:	68d2      	ldr	r2, [r2, #12]
 8001da0:	0a12      	lsrs	r2, r2, #8
 8001da2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
    break;
 8001dac:	e00c      	b.n	8001dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4a0e      	ldr	r2, [pc, #56]	@ (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db8:	68d2      	ldr	r2, [r2, #12]
 8001dba:	0a12      	lsrs	r2, r2, #8
 8001dbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
    break;
 8001dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0e5b      	lsrs	r3, r3, #25
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000
 8001df4:	016e3600 	.word	0x016e3600
 8001df8:	00f42400 	.word	0x00f42400

08001dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e042      	b.n	8001e94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d106      	bne.n	8001e26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f83b 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2224      	movs	r2, #36	@ 0x24
 8001e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fb2e 	bl	80024a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f82f 	bl	8001eb0 <UART_SetConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e01b      	b.n	8001e94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fbad 	bl	80025ec <UART_CheckIdleState>
 8001e92:	4603      	mov	r3, r0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb4:	b08c      	sub	sp, #48	@ 0x30
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4baa      	ldr	r3, [pc, #680]	@ (8002188 <UART_SetConfig+0x2d8>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a9f      	ldr	r2, [pc, #636]	@ (800218c <UART_SetConfig+0x2dc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8001f26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f30:	430b      	orrs	r3, r1
 8001f32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	f023 010f 	bic.w	r1, r3, #15
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a90      	ldr	r2, [pc, #576]	@ (8002190 <UART_SetConfig+0x2e0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d125      	bne.n	8001fa0 <UART_SetConfig+0xf0>
 8001f54:	4b8f      	ldr	r3, [pc, #572]	@ (8002194 <UART_SetConfig+0x2e4>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d81a      	bhi.n	8001f98 <UART_SetConfig+0xe8>
 8001f62:	a201      	add	r2, pc, #4	@ (adr r2, 8001f68 <UART_SetConfig+0xb8>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001f79 	.word	0x08001f79
 8001f6c:	08001f89 	.word	0x08001f89
 8001f70:	08001f81 	.word	0x08001f81
 8001f74:	08001f91 	.word	0x08001f91
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f7e:	e116      	b.n	80021ae <UART_SetConfig+0x2fe>
 8001f80:	2302      	movs	r3, #2
 8001f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f86:	e112      	b.n	80021ae <UART_SetConfig+0x2fe>
 8001f88:	2304      	movs	r3, #4
 8001f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f8e:	e10e      	b.n	80021ae <UART_SetConfig+0x2fe>
 8001f90:	2308      	movs	r3, #8
 8001f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f96:	e10a      	b.n	80021ae <UART_SetConfig+0x2fe>
 8001f98:	2310      	movs	r3, #16
 8001f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f9e:	e106      	b.n	80021ae <UART_SetConfig+0x2fe>
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8002198 <UART_SetConfig+0x2e8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d138      	bne.n	800201c <UART_SetConfig+0x16c>
 8001faa:	4b7a      	ldr	r3, [pc, #488]	@ (8002194 <UART_SetConfig+0x2e4>)
 8001fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d82d      	bhi.n	8002014 <UART_SetConfig+0x164>
 8001fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <UART_SetConfig+0x110>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001ff5 	.word	0x08001ff5
 8001fc4:	08002015 	.word	0x08002015
 8001fc8:	08002015 	.word	0x08002015
 8001fcc:	08002015 	.word	0x08002015
 8001fd0:	08002005 	.word	0x08002005
 8001fd4:	08002015 	.word	0x08002015
 8001fd8:	08002015 	.word	0x08002015
 8001fdc:	08002015 	.word	0x08002015
 8001fe0:	08001ffd 	.word	0x08001ffd
 8001fe4:	08002015 	.word	0x08002015
 8001fe8:	08002015 	.word	0x08002015
 8001fec:	08002015 	.word	0x08002015
 8001ff0:	0800200d 	.word	0x0800200d
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ffa:	e0d8      	b.n	80021ae <UART_SetConfig+0x2fe>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002002:	e0d4      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002004:	2304      	movs	r3, #4
 8002006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800200a:	e0d0      	b.n	80021ae <UART_SetConfig+0x2fe>
 800200c:	2308      	movs	r3, #8
 800200e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002012:	e0cc      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002014:	2310      	movs	r3, #16
 8002016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800201a:	e0c8      	b.n	80021ae <UART_SetConfig+0x2fe>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5e      	ldr	r2, [pc, #376]	@ (800219c <UART_SetConfig+0x2ec>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d125      	bne.n	8002072 <UART_SetConfig+0x1c2>
 8002026:	4b5b      	ldr	r3, [pc, #364]	@ (8002194 <UART_SetConfig+0x2e4>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002030:	2b30      	cmp	r3, #48	@ 0x30
 8002032:	d016      	beq.n	8002062 <UART_SetConfig+0x1b2>
 8002034:	2b30      	cmp	r3, #48	@ 0x30
 8002036:	d818      	bhi.n	800206a <UART_SetConfig+0x1ba>
 8002038:	2b20      	cmp	r3, #32
 800203a:	d00a      	beq.n	8002052 <UART_SetConfig+0x1a2>
 800203c:	2b20      	cmp	r3, #32
 800203e:	d814      	bhi.n	800206a <UART_SetConfig+0x1ba>
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <UART_SetConfig+0x19a>
 8002044:	2b10      	cmp	r3, #16
 8002046:	d008      	beq.n	800205a <UART_SetConfig+0x1aa>
 8002048:	e00f      	b.n	800206a <UART_SetConfig+0x1ba>
 800204a:	2300      	movs	r3, #0
 800204c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002050:	e0ad      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002052:	2302      	movs	r3, #2
 8002054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002058:	e0a9      	b.n	80021ae <UART_SetConfig+0x2fe>
 800205a:	2304      	movs	r3, #4
 800205c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002060:	e0a5      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002062:	2308      	movs	r3, #8
 8002064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002068:	e0a1      	b.n	80021ae <UART_SetConfig+0x2fe>
 800206a:	2310      	movs	r3, #16
 800206c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002070:	e09d      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a4a      	ldr	r2, [pc, #296]	@ (80021a0 <UART_SetConfig+0x2f0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d125      	bne.n	80020c8 <UART_SetConfig+0x218>
 800207c:	4b45      	ldr	r3, [pc, #276]	@ (8002194 <UART_SetConfig+0x2e4>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002082:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002086:	2bc0      	cmp	r3, #192	@ 0xc0
 8002088:	d016      	beq.n	80020b8 <UART_SetConfig+0x208>
 800208a:	2bc0      	cmp	r3, #192	@ 0xc0
 800208c:	d818      	bhi.n	80020c0 <UART_SetConfig+0x210>
 800208e:	2b80      	cmp	r3, #128	@ 0x80
 8002090:	d00a      	beq.n	80020a8 <UART_SetConfig+0x1f8>
 8002092:	2b80      	cmp	r3, #128	@ 0x80
 8002094:	d814      	bhi.n	80020c0 <UART_SetConfig+0x210>
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <UART_SetConfig+0x1f0>
 800209a:	2b40      	cmp	r3, #64	@ 0x40
 800209c:	d008      	beq.n	80020b0 <UART_SetConfig+0x200>
 800209e:	e00f      	b.n	80020c0 <UART_SetConfig+0x210>
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020a6:	e082      	b.n	80021ae <UART_SetConfig+0x2fe>
 80020a8:	2302      	movs	r3, #2
 80020aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020ae:	e07e      	b.n	80021ae <UART_SetConfig+0x2fe>
 80020b0:	2304      	movs	r3, #4
 80020b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020b6:	e07a      	b.n	80021ae <UART_SetConfig+0x2fe>
 80020b8:	2308      	movs	r3, #8
 80020ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020be:	e076      	b.n	80021ae <UART_SetConfig+0x2fe>
 80020c0:	2310      	movs	r3, #16
 80020c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020c6:	e072      	b.n	80021ae <UART_SetConfig+0x2fe>
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a35      	ldr	r2, [pc, #212]	@ (80021a4 <UART_SetConfig+0x2f4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d12a      	bne.n	8002128 <UART_SetConfig+0x278>
 80020d2:	4b30      	ldr	r3, [pc, #192]	@ (8002194 <UART_SetConfig+0x2e4>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020e0:	d01a      	beq.n	8002118 <UART_SetConfig+0x268>
 80020e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020e6:	d81b      	bhi.n	8002120 <UART_SetConfig+0x270>
 80020e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ec:	d00c      	beq.n	8002108 <UART_SetConfig+0x258>
 80020ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f2:	d815      	bhi.n	8002120 <UART_SetConfig+0x270>
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <UART_SetConfig+0x250>
 80020f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020fc:	d008      	beq.n	8002110 <UART_SetConfig+0x260>
 80020fe:	e00f      	b.n	8002120 <UART_SetConfig+0x270>
 8002100:	2300      	movs	r3, #0
 8002102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002106:	e052      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002108:	2302      	movs	r3, #2
 800210a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800210e:	e04e      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002110:	2304      	movs	r3, #4
 8002112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002116:	e04a      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002118:	2308      	movs	r3, #8
 800211a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800211e:	e046      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002120:	2310      	movs	r3, #16
 8002122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002126:	e042      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a17      	ldr	r2, [pc, #92]	@ (800218c <UART_SetConfig+0x2dc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d13a      	bne.n	80021a8 <UART_SetConfig+0x2f8>
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <UART_SetConfig+0x2e4>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002138:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800213c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002140:	d01a      	beq.n	8002178 <UART_SetConfig+0x2c8>
 8002142:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002146:	d81b      	bhi.n	8002180 <UART_SetConfig+0x2d0>
 8002148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800214c:	d00c      	beq.n	8002168 <UART_SetConfig+0x2b8>
 800214e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002152:	d815      	bhi.n	8002180 <UART_SetConfig+0x2d0>
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <UART_SetConfig+0x2b0>
 8002158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215c:	d008      	beq.n	8002170 <UART_SetConfig+0x2c0>
 800215e:	e00f      	b.n	8002180 <UART_SetConfig+0x2d0>
 8002160:	2300      	movs	r3, #0
 8002162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002166:	e022      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002168:	2302      	movs	r3, #2
 800216a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800216e:	e01e      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002170:	2304      	movs	r3, #4
 8002172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002176:	e01a      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002178:	2308      	movs	r3, #8
 800217a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800217e:	e016      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002180:	2310      	movs	r3, #16
 8002182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002186:	e012      	b.n	80021ae <UART_SetConfig+0x2fe>
 8002188:	cfff69f3 	.word	0xcfff69f3
 800218c:	40008000 	.word	0x40008000
 8002190:	40013800 	.word	0x40013800
 8002194:	40021000 	.word	0x40021000
 8002198:	40004400 	.word	0x40004400
 800219c:	40004800 	.word	0x40004800
 80021a0:	40004c00 	.word	0x40004c00
 80021a4:	40005000 	.word	0x40005000
 80021a8:	2310      	movs	r3, #16
 80021aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4aae      	ldr	r2, [pc, #696]	@ (800246c <UART_SetConfig+0x5bc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	f040 8097 	bne.w	80022e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80021ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d823      	bhi.n	800220a <UART_SetConfig+0x35a>
 80021c2:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <UART_SetConfig+0x318>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	080021ed 	.word	0x080021ed
 80021cc:	0800220b 	.word	0x0800220b
 80021d0:	080021f5 	.word	0x080021f5
 80021d4:	0800220b 	.word	0x0800220b
 80021d8:	080021fb 	.word	0x080021fb
 80021dc:	0800220b 	.word	0x0800220b
 80021e0:	0800220b 	.word	0x0800220b
 80021e4:	0800220b 	.word	0x0800220b
 80021e8:	08002203 	.word	0x08002203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021ec:	f7ff fd94 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 80021f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80021f2:	e010      	b.n	8002216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021f4:	4b9e      	ldr	r3, [pc, #632]	@ (8002470 <UART_SetConfig+0x5c0>)
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80021f8:	e00d      	b.n	8002216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021fa:	f7ff fd1f 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80021fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002200:	e009      	b.n	8002216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002208:	e005      	b.n	8002216 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8130 	beq.w	800247e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	4a94      	ldr	r2, [pc, #592]	@ (8002474 <UART_SetConfig+0x5c4>)
 8002224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002228:	461a      	mov	r2, r3
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002230:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	429a      	cmp	r2, r3
 8002240:	d305      	bcc.n	800224e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	429a      	cmp	r2, r3
 800224c:	d903      	bls.n	8002256 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002254:	e113      	b.n	800247e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	2200      	movs	r2, #0
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	60fa      	str	r2, [r7, #12]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	4a84      	ldr	r2, [pc, #528]	@ (8002474 <UART_SetConfig+0x5c4>)
 8002264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002268:	b29b      	uxth	r3, r3
 800226a:	2200      	movs	r2, #0
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002278:	f7fd ffce 	bl	8000218 <__aeabi_uldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	020b      	lsls	r3, r1, #8
 800228e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002292:	0202      	lsls	r2, r0, #8
 8002294:	6979      	ldr	r1, [r7, #20]
 8002296:	6849      	ldr	r1, [r1, #4]
 8002298:	0849      	lsrs	r1, r1, #1
 800229a:	2000      	movs	r0, #0
 800229c:	460c      	mov	r4, r1
 800229e:	4605      	mov	r5, r0
 80022a0:	eb12 0804 	adds.w	r8, r2, r4
 80022a4:	eb43 0905 	adc.w	r9, r3, r5
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	469a      	mov	sl, r3
 80022b0:	4693      	mov	fp, r2
 80022b2:	4652      	mov	r2, sl
 80022b4:	465b      	mov	r3, fp
 80022b6:	4640      	mov	r0, r8
 80022b8:	4649      	mov	r1, r9
 80022ba:	f7fd ffad 	bl	8000218 <__aeabi_uldivmod>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4613      	mov	r3, r2
 80022c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022cc:	d308      	bcc.n	80022e0 <UART_SetConfig+0x430>
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022d4:	d204      	bcs.n	80022e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a3a      	ldr	r2, [r7, #32]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	e0ce      	b.n	800247e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80022e6:	e0ca      	b.n	800247e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022f0:	d166      	bne.n	80023c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80022f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d827      	bhi.n	800234a <UART_SetConfig+0x49a>
 80022fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002300 <UART_SetConfig+0x450>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002325 	.word	0x08002325
 8002304:	0800232d 	.word	0x0800232d
 8002308:	08002335 	.word	0x08002335
 800230c:	0800234b 	.word	0x0800234b
 8002310:	0800233b 	.word	0x0800233b
 8002314:	0800234b 	.word	0x0800234b
 8002318:	0800234b 	.word	0x0800234b
 800231c:	0800234b 	.word	0x0800234b
 8002320:	08002343 	.word	0x08002343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002324:	f7ff fcf8 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8002328:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800232a:	e014      	b.n	8002356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800232c:	f7ff fd0a 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 8002330:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002332:	e010      	b.n	8002356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002334:	4b4e      	ldr	r3, [pc, #312]	@ (8002470 <UART_SetConfig+0x5c0>)
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002338:	e00d      	b.n	8002356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800233a:	f7ff fc7f 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 800233e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002340:	e009      	b.n	8002356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002348:	e005      	b.n	8002356 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002354:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8090 	beq.w	800247e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	4a44      	ldr	r2, [pc, #272]	@ (8002474 <UART_SetConfig+0x5c4>)
 8002364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002368:	461a      	mov	r2, r3
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002370:	005a      	lsls	r2, r3, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	441a      	add	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	d916      	bls.n	80023b8 <UART_SetConfig+0x508>
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002390:	d212      	bcs.n	80023b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	b29b      	uxth	r3, r3
 8002396:	f023 030f 	bic.w	r3, r3, #15
 800239a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	8bfb      	ldrh	r3, [r7, #30]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	8bfa      	ldrh	r2, [r7, #30]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e062      	b.n	800247e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80023be:	e05e      	b.n	800247e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d828      	bhi.n	800241a <UART_SetConfig+0x56a>
 80023c8:	a201      	add	r2, pc, #4	@ (adr r2, 80023d0 <UART_SetConfig+0x520>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023f5 	.word	0x080023f5
 80023d4:	080023fd 	.word	0x080023fd
 80023d8:	08002405 	.word	0x08002405
 80023dc:	0800241b 	.word	0x0800241b
 80023e0:	0800240b 	.word	0x0800240b
 80023e4:	0800241b 	.word	0x0800241b
 80023e8:	0800241b 	.word	0x0800241b
 80023ec:	0800241b 	.word	0x0800241b
 80023f0:	08002413 	.word	0x08002413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023f4:	f7ff fc90 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 80023f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80023fa:	e014      	b.n	8002426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023fc:	f7ff fca2 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002402:	e010      	b.n	8002426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002404:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <UART_SetConfig+0x5c0>)
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002408:	e00d      	b.n	8002426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800240a:	f7ff fc17 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 800240e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002410:	e009      	b.n	8002426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002418:	e005      	b.n	8002426 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002424:	bf00      	nop
    }

    if (pclk != 0U)
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	d028      	beq.n	800247e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002430:	4a10      	ldr	r2, [pc, #64]	@ (8002474 <UART_SetConfig+0x5c4>)
 8002432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002436:	461a      	mov	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	fbb3 f2f2 	udiv	r2, r3, r2
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	441a      	add	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	d910      	bls.n	8002478 <UART_SetConfig+0x5c8>
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800245c:	d20c      	bcs.n	8002478 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	b29a      	uxth	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60da      	str	r2, [r3, #12]
 8002468:	e009      	b.n	800247e <UART_SetConfig+0x5ce>
 800246a:	bf00      	nop
 800246c:	40008000 	.word	0x40008000
 8002470:	00f42400 	.word	0x00f42400
 8002474:	08002974 	.word	0x08002974
      }
      else
      {
        ret = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2201      	movs	r2, #1
 8002482:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2201      	movs	r2, #1
 800248a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2200      	movs	r2, #0
 8002492:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2200      	movs	r2, #0
 8002498:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800249a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3730      	adds	r7, #48	@ 0x30
 80024a2:	46bd      	mov	sp, r7
 80024a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080024a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01a      	beq.n	80025be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025a6:	d10a      	bne.n	80025be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]
  }
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b098      	sub	sp, #96	@ 0x60
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025fc:	f7fe faee 	bl	8000bdc <HAL_GetTick>
 8002600:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b08      	cmp	r3, #8
 800260e:	d12f      	bne.n	8002670 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f88e 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d022      	beq.n	8002670 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002632:	e853 3f00 	ldrex	r3, [r3]
 8002636:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800263a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800263e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002648:	647b      	str	r3, [r7, #68]	@ 0x44
 800264a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800264e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002650:	e841 2300 	strex	r3, r2, [r1]
 8002654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e6      	bne.n	800262a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e063      	b.n	8002738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b04      	cmp	r3, #4
 800267c:	d149      	bne.n	8002712 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800267e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f857 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03c      	beq.n	8002712 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	623b      	str	r3, [r7, #32]
   return(result);
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80026b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026be:	e841 2300 	strex	r3, r2, [r1]
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e6      	bne.n	8002698 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3308      	adds	r3, #8
 80026d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3308      	adds	r3, #8
 80026e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026ea:	61fa      	str	r2, [r7, #28]
 80026ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	e841 2300 	strex	r3, r2, [r1]
 80026f6:	617b      	str	r3, [r7, #20]
   return(result);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1e5      	bne.n	80026ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2220      	movs	r2, #32
 8002702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e012      	b.n	8002738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3758      	adds	r7, #88	@ 0x58
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002750:	e04f      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d04b      	beq.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7fe fa3f 	bl	8000bdc <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <UART_WaitOnFlagUntilTimeout+0x30>
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e04e      	b.n	8002812 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d037      	beq.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b80      	cmp	r3, #128	@ 0x80
 8002786:	d034      	beq.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b40      	cmp	r3, #64	@ 0x40
 800278c:	d031      	beq.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b08      	cmp	r3, #8
 800279a:	d110      	bne.n	80027be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2208      	movs	r2, #8
 80027a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f838 	bl	800281a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2208      	movs	r2, #8
 80027ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e029      	b.n	8002812 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027cc:	d111      	bne.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f81e 	bl	800281a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e00f      	b.n	8002812 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	429a      	cmp	r2, r3
 800280e:	d0a0      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800281a:	b480      	push	{r7}
 800281c:	b095      	sub	sp, #84	@ 0x54
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282a:	e853 3f00 	ldrex	r3, [r3]
 800282e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002840:	643b      	str	r3, [r7, #64]	@ 0x40
 8002842:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002848:	e841 2300 	strex	r3, r2, [r1]
 800284c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e6      	bne.n	8002822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3308      	adds	r3, #8
 800285a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	61fb      	str	r3, [r7, #28]
   return(result);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3308      	adds	r3, #8
 8002876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800287a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800287e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e3      	bne.n	8002854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d118      	bne.n	80028c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f023 0310 	bic.w	r3, r3, #16
 80028a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6979      	ldr	r1, [r7, #20]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	e841 2300 	strex	r3, r2, [r1]
 80028be:	613b      	str	r3, [r7, #16]
   return(result);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e6      	bne.n	8002894 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80028da:	bf00      	nop
 80028dc:	3754      	adds	r7, #84	@ 0x54
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <memset>:
 80028e6:	4402      	add	r2, r0
 80028e8:	4603      	mov	r3, r0
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d100      	bne.n	80028f0 <memset+0xa>
 80028ee:	4770      	bx	lr
 80028f0:	f803 1b01 	strb.w	r1, [r3], #1
 80028f4:	e7f9      	b.n	80028ea <memset+0x4>
	...

080028f8 <__libc_init_array>:
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002930 <__libc_init_array+0x38>)
 80028fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002934 <__libc_init_array+0x3c>)
 80028fe:	1b64      	subs	r4, r4, r5
 8002900:	10a4      	asrs	r4, r4, #2
 8002902:	2600      	movs	r6, #0
 8002904:	42a6      	cmp	r6, r4
 8002906:	d109      	bne.n	800291c <__libc_init_array+0x24>
 8002908:	4d0b      	ldr	r5, [pc, #44]	@ (8002938 <__libc_init_array+0x40>)
 800290a:	4c0c      	ldr	r4, [pc, #48]	@ (800293c <__libc_init_array+0x44>)
 800290c:	f000 f818 	bl	8002940 <_init>
 8002910:	1b64      	subs	r4, r4, r5
 8002912:	10a4      	asrs	r4, r4, #2
 8002914:	2600      	movs	r6, #0
 8002916:	42a6      	cmp	r6, r4
 8002918:	d105      	bne.n	8002926 <__libc_init_array+0x2e>
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002920:	4798      	blx	r3
 8002922:	3601      	adds	r6, #1
 8002924:	e7ee      	b.n	8002904 <__libc_init_array+0xc>
 8002926:	f855 3b04 	ldr.w	r3, [r5], #4
 800292a:	4798      	blx	r3
 800292c:	3601      	adds	r6, #1
 800292e:	e7f2      	b.n	8002916 <__libc_init_array+0x1e>
 8002930:	08002994 	.word	0x08002994
 8002934:	08002994 	.word	0x08002994
 8002938:	08002994 	.word	0x08002994
 800293c:	08002998 	.word	0x08002998

08002940 <_init>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	bf00      	nop
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr

0800294c <_fini>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr
